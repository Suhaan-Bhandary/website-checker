// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/Suhaan-Bhandary/website-checker/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteWebsite provides a mock function with given fields: website
func (_m *Service) DeleteWebsite(website string) error {
	ret := _m.Called(website)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebsite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(website)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllStatus provides a mock function with given fields:
func (_m *Service) GetAllStatus() map[string]repository.WebsitesStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllStatus")
	}

	var r0 map[string]repository.WebsitesStatus
	if rf, ok := ret.Get(0).(func() map[string]repository.WebsitesStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]repository.WebsitesStatus)
		}
	}

	return r0
}

// GetWebsiteStatus provides a mock function with given fields: website
func (_m *Service) GetWebsiteStatus(website string) (repository.WebsitesStatus, error) {
	ret := _m.Called(website)

	if len(ret) == 0 {
		panic("no return value specified for GetWebsiteStatus")
	}

	var r0 repository.WebsitesStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.WebsitesStatus, error)); ok {
		return rf(website)
	}
	if rf, ok := ret.Get(0).(func(string) repository.WebsitesStatus); ok {
		r0 = rf(website)
	} else {
		r0 = ret.Get(0).(repository.WebsitesStatus)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(website)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebsites provides a mock function with given fields:
func (_m *Service) GetWebsites() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWebsites")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// InsertWebsites provides a mock function with given fields: _a0
func (_m *Service) InsertWebsites(_a0 []string) {
	_m.Called(_a0)
}

// StatusUpdateBackgroundJob provides a mock function with given fields: ctx
func (_m *Service) StatusUpdateBackgroundJob(ctx context.Context) {
	_m.Called(ctx)
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
