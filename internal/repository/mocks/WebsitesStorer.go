// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	repository "github.com/Suhaan-Bhandary/website-checker/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// WebsitesStorer is an autogenerated mock type for the WebsitesStorer type
type WebsitesStorer struct {
	mock.Mock
}

// DeleteAllWebsites provides a mock function with given fields:
func (_m *WebsitesStorer) DeleteAllWebsites() {
	_m.Called()
}

// DeleteWebsite provides a mock function with given fields: website
func (_m *WebsitesStorer) DeleteWebsite(website string) {
	_m.Called(website)
}

// GetAllWebsiteStatus provides a mock function with given fields:
func (_m *WebsitesStorer) GetAllWebsiteStatus() map[string]repository.WebsitesStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllWebsiteStatus")
	}

	var r0 map[string]repository.WebsitesStatus
	if rf, ok := ret.Get(0).(func() map[string]repository.WebsitesStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]repository.WebsitesStatus)
		}
	}

	return r0
}

// GetWebsiteStatus provides a mock function with given fields: website
func (_m *WebsitesStorer) GetWebsiteStatus(website string) repository.WebsitesStatus {
	ret := _m.Called(website)

	if len(ret) == 0 {
		panic("no return value specified for GetWebsiteStatus")
	}

	var r0 repository.WebsitesStatus
	if rf, ok := ret.Get(0).(func(string) repository.WebsitesStatus); ok {
		r0 = rf(website)
	} else {
		r0 = ret.Get(0).(repository.WebsitesStatus)
	}

	return r0
}

// GetWebsites provides a mock function with given fields:
func (_m *WebsitesStorer) GetWebsites() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWebsites")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// InsertWebsite provides a mock function with given fields: websites
func (_m *WebsitesStorer) InsertWebsite(websites string) {
	_m.Called(websites)
}

// IsWebsitePresent provides a mock function with given fields: website
func (_m *WebsitesStorer) IsWebsitePresent(website string) bool {
	ret := _m.Called(website)

	if len(ret) == 0 {
		panic("no return value specified for IsWebsitePresent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(website)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateAllWebsiteStatus provides a mock function with given fields:
func (_m *WebsitesStorer) UpdateAllWebsiteStatus() {
	_m.Called()
}

// NewWebsitesStorer creates a new instance of WebsitesStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebsitesStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebsitesStorer {
	mock := &WebsitesStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
